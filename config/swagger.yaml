openapi: 3.0.0
info:
  title: server-side-{your desired name}
  description: Node.js + MongoDB - API with email sign-up, verification, authentication and forgot password + data manipulation + paginated data serving
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  # 1st step
  /api/getTerms:
    get:
      summary: Get a list of terms, depend on user page and size
      description: Restricted to authenticated users.
      operationId: getTerms-paginatedrequest
      parameters:
        - in: query
          name: parameters
          required: true
          schema:
            type: object ## {from: 1, size: 10}
            properties:
              from:
                type: integer
                example: 1
              size:
                type: integer
                example: 10
      responses:
        "200":
          description: An array of specific terms
          content:
            application/json:
              schema:
                data:
                  type: object
                  properties:
                    terms:
                      type: array ## [{key: 'CHEBI:18320', label: }]
                      properties:
                        key:
                          type: string
                          example: "CHEBI:18320"
                        label:
                          type: string
                          example: "1,4-dithiothreitol"
                        synonyms:
                          type: string
                          example: "Del(14)(q12), 14q12 microdeletion syndrome, monosomy 14q12, Monosomy 14q12"
                        obo_id:
                          type: string
                          example: "1,4-dithiothreitol"
                        term_editor:
                          type: string
                          example: "Laura Harris"
                        has_children:
                          type: boolean
                          example: false
                    count:
                      type: integer
                      example: 1000
        "400":
          description: Error on receiving the terms
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error" ## pass the exact message of the error from server
  /api/term/{id}:
    parameters:
      - in: path
        name: id
        description: Term id
        required: true
        example: "CHEBI:18"
        schema:
          type: string
    put:
      summary: Update an term
      description: Admin users can update any term
      operationId: updateTerm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  example: "dithiothreitol"
                synonyms:
                  type: string
                  example: "Del(14)(q12), 14q12 microdeletion syndrome"
                term_editor:
                  type: string
                  example: "Laura Harris"
                has_children:
                  type: boolean
                  example: false

        responses:
          "200":
            description: Term updated successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    term:
                      type: object ## {term: {key: 'CHEBI:18320', label: '1,4-dithiothreitol' }}
                      properties:
                        key:
                          type: string
                          example: "CHEBI:18320"
                        label:
                          type: string
                          example: "1,4-dithiothreitol"
                        synonyms:
                          type: string
                          example: "Del(14)(q12), 14q12 microdeletion syndrome, monosomy 14q12, Monosomy 14q12"
                        obo_id:
                          type: string
                          example: "1,4-dithiothreitol"
                        term_editor:
                          type: string
                          example: "Laura Harris"
                        has_children:
                          type: boolean
                          example: false

          "404":
            description: The term not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Undefined term"
          "400":
            description: Error on receiving the term
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Server error" ## pass the exact message of the error from server
    delete:
      summary: Delete a term
      description: Admin users can delete any term.
      operationId: deleteTerm
      responses:
        "200":
          description: Term deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  term:
                    type: object ## {term: {key: 'CHEBI:18320', label: '1,4-dithiothreitol' }}
                    properties:
                      key:
                        type: string
                        example: "CHEBI:18320"
                      label:
                        type: string
                        example: "1,4-dithiothreitol"
                      synonyms:
                        type: string
                        example: "Del(14)(q12), 14q12 microdeletion syndrome, monosomy 14q12, Monosomy 14q12"
                      obo_id:
                        type: string
                        example: "1,4-dithiothreitol"
                      term_editor:
                        type: string
                        example: "Laura Harris"
                      has_children:
                        type: boolean
                        example: false
        "404":
          description: The term not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Undefined term"
        "400":
          description: Error on receiving the term
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error" ## pass the exact message of the error from server
  ## 2nd step
  /auth/login:
    post:
      summary: Authenticate account credentials and return a JWT token
      description: Accounts must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - email
                - password
      responses:
        "200":
          description: Account details
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: "jason@example.com"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "401":
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"
  /auth/register:
    post:
      summary: Register a new user account and send a verification email
      description: The first account registered in the system is assigned the `Admin` role, other accounts are assigned the `User` role.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "Jason"
                lastName:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
              required:
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
      responses:
        "200":
          description: The registration request was successful and a verification email has been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful, please check your email for verification instructions"
        "400":
          description: Error on registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The email already exists" ## pass the exact message of the error from server
  /auth/verify-email:
    post:
      summary: Verify a new account with a verification token received by email after registration
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
              required:
                - token
      responses:
        "200":
          description: Verification was successful so you can now login to the account
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification successful, you can now login"
        "400":
          description: Verification failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification failed"
  /auth/forgot-password:
    post:
      summary: Submit email address to reset the password on an account
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
              required:
                - email
      responses:
        "200":
          description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an account)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please check your email for password reset instructions"
        "400":
          description: Error on email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email doesn't exist, please check your email" ## pass the exact message of the error from server
  /auth/reset-password:
    post:
      summary: Reset the password for an account
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
                password:
                  type: string
                  example: "newPass123"
                confirmPassword:
                  type: string
                  example: "newPass123"
              required:
                - token
                - password
                - confirmPassword
      responses:
        "200":
          description: Password reset was successful so you can now login to the account with the new password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful, you can now login"
        "400":
          description: Password reset failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
